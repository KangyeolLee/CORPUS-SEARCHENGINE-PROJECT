{"version":3,"sources":["features/searchResult/searchResultSlice.js","components/OptionSettingBar.js","components/TableForm.js","components/Result.js","features/textFile/textFileSlice.js","components/TextInput.js","App.js","store.js","index.js"],"names":["searchResultSlice","createSlice","name","initialState","searchWords","aroundWords","reducers","updateSearchWord","state","action","payload","updateAroundWord","actions","REGEX","OptionSettingBar","useState","word","setWord","range","setRange","text","useSelector","textFile","value","dispatch","useDispatch","Accordion","defaultExpanded","AccordionSummary","style","borderBottom","expandIcon","Typography","variant","display","alignItems","fontSize","marginRight","AccordionDetails","marginTop","FormControl","margin","Grid","container","spacing","item","TextField","onChange","e","preventDefault","target","label","helperText","Button","onClick","lowerText","toLowerCase","myWord","trim","slicedText","match","filteredSentence","split","filter","String","sentence","includes","hashText","myText","reduce","acc","cur","sum","result","alert","size","color","TableForm","data","ranges","hashSetForTableData","i","push","tableData","Object","values","frequencyRange","length","keyword","Set","sort","a","b","appearance","Table","TableHead","TableRow","TableCell","map","num","uuid","TableBody","tbcell","strs","entries","count","line","Result","sentences","searchResult","wordsArr","setWordsArr","setSum","useEffect","initialWordsArr","initialSum","wordsInPrev","wordsInNext","splitedSentence","indexes","idx","start","end","prevColumns","slice","nextColumns","reverse","console","log","onClickMinusBtn","id","currentTarget","nextWordsArr","nextSum","IconButton","marginLeft","inputProps","readOnly","Alert","severity","AlertTitle","Divider","justifyContent","padding","fontWeight","Box","my","mx","textFileSlice","update","TextInput","setText","onPaste","clipboardData","getData","fullWidth","rows","placeholder","multiline","App","Container","maxWidth","align","component","configureStore","reducer","textFileReducer","searchResultReducer","ReactDOM","render","store","document","getElementById"],"mappings":"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","file":"static/js/main.87011cc7.chunk.js","sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\n\nexport const searchResultSlice = createSlice({\n  name: \"searchResult\",\n  initialState: {\n    searchWords: \"\",\n    aroundWords: \"\",\n  },\n  reducers: {\n    updateSearchWord: (state, action) => {\n      state.searchWords = action.payload;\n    },\n    updateAroundWord: (state, action) => {\n      state.aroundWords = action.payload;\n    },\n  },\n});\n\nexport const { updateSearchWord, updateAroundWord } = searchResultSlice.actions;\n\nexport default searchResultSlice.reducer;\n","import {\n  Accordion,\n  AccordionDetails,\n  AccordionSummary,\n  Button,\n  FormControl,\n  Grid,\n  TextField,\n  Typography,\n} from \"@material-ui/core\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport {\n  updateSearchWord,\n  updateAroundWord,\n} from \"../features/searchResult/searchResultSlice\";\nimport ExpandMoreIcon from \"@material-ui/icons/ExpandMore\";\nimport FindInPageOutlinedIcon from \"@material-ui/icons/FindInPageOutlined\";\nimport React, { useState } from \"react\";\n\nconst REGEX = /\\S[A-Za-z-ÁÀȦÂÄǞǍĂĀÃÅǺǼǢĆĊĈČĎḌḐḒÉÈĖÊËĚĔĒẼE̊ẸǴĠĜǦĞG̃ĢĤḤáàȧâäǟǎăāãåǻǽǣćċĉčďḍḑḓéèėêëěĕēẽe̊ẹǵġĝǧğg̃ģĥḥÍÌİÎÏǏĬĪĨỊĴĶǨĹĻĽĿḼM̂M̄ʼNŃN̂ṄN̈ŇN̄ÑŅṊÓÒȮȰÔÖȪǑŎŌÕȬŐỌǾƠíìiîïǐĭīĩịĵķǩĺļľŀḽm̂m̄ŉńn̂ṅn̈ňn̄ñņṋóòôȯȱöȫǒŏōõȭőọǿơP̄ŔŘŖŚŜṠŠȘṢŤȚṬṰÚÙÛÜǓŬŪŨŰŮỤẂẀŴẄÝỲŶŸȲỸŹŻŽẒǮp̄ŕřŗśŝṡšşṣťțṭṱúùûüǔŭūũűůụẃẁŵẅýỳŷÿȳỹźżžẓǯßœŒçÇ]*/gi;\n\nconst OptionSettingBar = () => {\n  const [word, setWord] = useState(\"\");\n  const [range, setRange] = useState(1);\n  const text = useSelector((state) => state.textFile.value);\n  const dispatch = useDispatch();\n\n  const onChangeWord = (e) => {\n    e.preventDefault();\n    setWord(e.target.value);\n  };\n\n  const onChangeRange = (e) => {\n    e.preventDefault();\n    setRange(e.target.value);\n  };\n\n  const onSubmit = (e) => {\n    e.preventDefault();\n\n    const lowerText = text.toLowerCase();\n    const myWord = word.trim().toLowerCase();\n    if (!text) {\n      alert(\"검색할 파일 내용을 복붙하세욧!\");\n      return;\n    }\n\n    if (!word) {\n      alert(\"검색할 단어를 입력하세욨!\");\n      return;\n    }\n\n    const slicedText = lowerText.match(REGEX);\n    const sentences = lowerText.split(/[\\n|.|?|!]/gi).filter(String);\n\n    const filteredSentence = sentences.filter((sentence) =>\n      sentence.includes(myWord)\n    );\n\n    const filtered = slicedText.filter((myText) => myText.includes(myWord));\n\n    const hashText = filtered.reduce((acc, cur) => {\n      if (acc[cur]) {\n        acc[cur].sum++;\n      } else acc[cur] = { sum: 1 };\n\n      return acc;\n    }, {});\n\n    const result = {\n      word,\n      text: hashText,\n      range: range,\n    };\n\n    dispatch(updateAroundWord(filteredSentence));\n    dispatch(updateSearchWord(result));\n  };\n\n  return (\n    <Accordion defaultExpanded={true}>\n      <AccordionSummary\n        style={{ borderBottom: \"1px solid #ededed\" }}\n        expandIcon={<ExpandMoreIcon />}\n      >\n        <Typography\n          variant=\"h5\"\n          style={{ display: \"flex\", alignItems: \"center\" }}\n        >\n          <FindInPageOutlinedIcon\n            fontSize=\"large\"\n            style={{ marginRight: \"1rem\" }}\n          />\n          검색어 설정\n        </Typography>\n      </AccordionSummary>\n      <AccordionDetails style={{ display: \"block\", marginTop: \"2rem\" }}>\n        <FormControl style={{ margin: \"0 2rem\" }}>\n          <Grid container spacing={3}>\n            <Grid item>\n              <TextField\n                value={word}\n                onChange={onChangeWord}\n                variant=\"outlined\"\n                label=\"검색할 단어\"\n                helperText=\"전치사 + 명사구 등 문장단위 가능\"\n              />\n            </Grid>\n\n            <Grid item>\n              <TextField\n                variant=\"outlined\"\n                label=\"검색 범위\"\n                helperText=\"기본범위 1\"\n                onChange={onChangeRange}\n                value={range}\n              />\n            </Grid>\n\n            <Grid item>\n              <Button\n                onClick={onSubmit}\n                size=\"large\"\n                variant=\"contained\"\n                color=\"primary\"\n              >\n                검색\n              </Button>\n            </Grid>\n          </Grid>\n        </FormControl>\n      </AccordionDetails>\n    </Accordion>\n  );\n};\n\nexport default OptionSettingBar;\n","import {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableRow,\n} from \"@material-ui/core\";\nimport React from \"react\";\nimport { v4 as uuid } from \"uuid\";\n\nconst TableForm = ({ range, data }) => {\n  const ranges = [];\n  const hashSetForTableData = {};\n  for (let i = 1; i <= range; i++) {\n    ranges.push(i);\n    hashSetForTableData[i] = {};\n  }\n\n  const tableData = Object.values(data);\n  const frequencyRange = [];\n  for (let i = 0; i < tableData.length; i++) {\n    for (const keyword of tableData[i]) {\n      hashSetForTableData[i + 1][keyword] = hashSetForTableData[i + 1][keyword]\n        ? hashSetForTableData[i + 1][keyword] + 1\n        : 1;\n    }\n    frequencyRange.push(\n      ...[...new Set(Object.values(hashSetForTableData[i + 1]))]\n    );\n  }\n\n  frequencyRange.sort((a, b) => a - b);\n  const exceptOneFrequency = [...new Set(frequencyRange)];\n  // exceptOneFrequency.shift();\n  const appearance = exceptOneFrequency;\n\n  // console.log(appearance);\n\n  // console.log(\"데이터 칸 수 : \", Object.values(hashSetForTableData));\n  // console.log(\"등장빈도 : \", appearance);\n\n  return (\n    <Table>\n      <TableHead>\n        <TableRow>\n          <TableCell>등장 빈도</TableCell>\n          {ranges.length > 0 &&\n            ranges.map((num) => <TableCell key={uuid()}>{num}칸</TableCell>)}\n        </TableRow>\n      </TableHead>\n      <TableBody>\n        {appearance.length > 0 &&\n          appearance.map((num) => (\n            <TableRow key={uuid()}>\n              <TableCell>{num}</TableCell>\n              {Object.values(hashSetForTableData).length > 0 &&\n                Object.values(hashSetForTableData).map((tbcell) => {\n                  const tbcInfo = Object.entries(tbcell);\n                  let strs = \"\";\n                  for (const [keyword, count] of tbcInfo) {\n                    if (num === count) {\n                      strs += keyword + \" \";\n                    }\n                  }\n                  return (\n                    <TableCell key={uuid()}>\n                      {strs.split(\" \").map((line) => (\n                        <span key={uuid()}>\n                          {line}\n                          <br />\n                        </span>\n                      ))}\n                    </TableCell>\n                  );\n                })}\n            </TableRow>\n          ))}\n      </TableBody>\n    </Table>\n  );\n};\n\nexport default TableForm;\n","import {\n  Accordion,\n  AccordionDetails,\n  AccordionSummary,\n  Box,\n  Divider,\n  Grid,\n  IconButton,\n  TextField,\n  Typography,\n} from \"@material-ui/core\";\nimport { Alert, AlertTitle } from \"@material-ui/lab\";\nimport { useSelector } from \"react-redux\";\nimport ExpandMoreIcon from \"@material-ui/icons/ExpandMore\";\nimport DescriptionOutlinedIcon from \"@material-ui/icons/DescriptionOutlined\";\nimport RemoveCircleOutlineIcon from \"@material-ui/icons/RemoveCircleOutline\";\nimport React, { useEffect, useState } from \"react\";\nimport TableForm from \"./TableForm\";\n\nconst Result = () => {\n  const sentences = useSelector((state) => state.searchResult.aroundWords);\n  const { word, text, range } = useSelector(\n    (state) => state.searchResult.searchWords\n  );\n  const [wordsArr, setWordsArr] = useState(\"\");\n  const [sum, setSum] = useState(0);\n\n  useEffect(() => {\n    const initialWordsArr = text ? Object.entries(text) : \"\";\n    const initialSum = text\n      ? Object.values(text).reduce((a, b) => a + b.sum, 0)\n      : 0;\n    setWordsArr(initialWordsArr);\n    setSum(initialSum);\n  }, [text]);\n\n  const wordsInPrev = {};\n  const wordsInNext = {};\n\n  for (const sentence of sentences) {\n    const splitedSentence = sentence.split(\" \").filter(String);\n    const indexes = splitedSentence.reduce((acc, cur, idx) => {\n      if (cur.includes(word)) acc.push(idx);\n      return acc;\n    }, []);\n\n    for (const idx of indexes) {\n      const start = idx - range * 1 >= 0 ? idx - range * 1 : 0;\n      const end = idx + range * 1 + 1;\n      const prevColumns = splitedSentence.slice(start, idx);\n      const nextColumns = splitedSentence.slice(idx + 1, end);\n\n      prevColumns.reverse();\n\n      for (let i = 0; i < prevColumns.length; i++) {\n        if (wordsInPrev[i + 1]) {\n          wordsInPrev[i + 1].push(prevColumns[i]);\n        } else {\n          wordsInPrev[i + 1] = [prevColumns[i]];\n        }\n      }\n\n      for (let i = 0; i < nextColumns.length; i++) {\n        if (wordsInNext[i + 1]) {\n          wordsInNext[i + 1].push(nextColumns[i]);\n        } else {\n          wordsInNext[i + 1] = [nextColumns[i]];\n        }\n      }\n    }\n  }\n\n  console.log(wordsInPrev);\n\n  const onClickMinusBtn = (e) => {\n    const id = e.currentTarget.id;\n    const nextWordsArr = wordsArr.filter((word) => word[0] !== id);\n    const nextSum = nextWordsArr.reduce((a, b) => a + b[1].sum, 0);\n    setWordsArr(nextWordsArr);\n    setSum(nextSum);\n  };\n\n  return (\n    <Accordion>\n      <AccordionSummary\n        style={{ borderBottom: \"1px solid #ededed\" }}\n        expandIcon={<ExpandMoreIcon />}\n      >\n        <Typography\n          variant=\"h5\"\n          style={{ display: \"flex\", alignItems: \"center\" }}\n        >\n          <DescriptionOutlinedIcon\n            fontSize=\"large\"\n            style={{ marginRight: \"1rem\" }}\n          />\n          검색 결과\n        </Typography>\n      </AccordionSummary>\n\n      <AccordionDetails style={{ display: \"block\", marginTop: \"2rem\" }}>\n        {wordsArr.length ? (\n          wordsArr.map((word) => (\n            <Grid\n              container\n              spacing={5}\n              key={word}\n              style={{ alignItems: \"center\" }}\n            >\n              <IconButton\n                onClick={onClickMinusBtn}\n                id={word[0]}\n                style={{ marginLeft: \"2rem\" }}\n              >\n                <RemoveCircleOutlineIcon color=\"secondary\" fontSize=\"large\" />\n              </IconButton>\n\n              <Grid item>\n                <TextField\n                  value={word[0]}\n                  label=\"검색결과\"\n                  variant=\"outlined\"\n                  inputProps={{ readOnly: true }}\n                />\n              </Grid>\n              <Grid item>\n                <TextField\n                  value={word[1].sum}\n                  label=\"등장빈도\"\n                  variant=\"outlined\"\n                  inputProps={{ readOnly: true }}\n                />\n              </Grid>\n            </Grid>\n          ))\n        ) : (\n          <Alert style={{ margin: \"0 2rem\" }} severity=\"warning\">\n            <AlertTitle>\n              <strong>아이고난!! 🤣</strong>\n            </AlertTitle>\n            검색 결과가 없습니다!\n          </Alert>\n        )}\n\n        <Divider style={{ margin: \"2rem\" }} />\n\n        <Grid\n          container\n          style={{ justifyContent: \"flex-end\", padding: \"0 2rem\" }}\n        >\n          <Grid item>\n            <TextField\n              value={sum}\n              label=\"총합\"\n              variant=\"outlined\"\n              inputProps={{ readOnly: true }}\n            />\n          </Grid>\n        </Grid>\n\n        <Typography\n          style={{ marginTop: \"3rem\", marginLeft: \"2rem\", fontWeight: \"bold\" }}\n          variant=\"h6\"\n        >\n          검색어 이전 등장 단어 목록\n        </Typography>\n\n        <Box my={1} mx=\"2rem\">\n          <TableForm range={range} data={wordsInPrev} />\n        </Box>\n\n        <Typography\n          style={{\n            marginTop: \"2.5rem\",\n            marginLeft: \"2rem\",\n            fontWeight: \"bold\",\n          }}\n          variant=\"h6\"\n        >\n          검색어 이후 등장 단어 목록\n        </Typography>\n\n        <Box my={1} mx=\"2rem\">\n          <TableForm range={range} data={wordsInNext} />\n        </Box>\n      </AccordionDetails>\n    </Accordion>\n  );\n};\n\nexport default Result;\n","import { createSlice } from \"@reduxjs/toolkit\";\n\nexport const textFileSlice = createSlice({\n  name: \"textFile\",\n  initialState: {\n    value: \"\",\n  },\n  reducers: {\n    update: (state, action) => {\n      state.value = action.payload;\n    },\n  },\n});\n\nexport const { update } = textFileSlice.actions;\n\nexport default textFileSlice.reducer;\n","import {\n  Accordion,\n  AccordionDetails,\n  AccordionSummary,\n  TextField,\n  Typography,\n} from \"@material-ui/core\";\nimport { useDispatch } from \"react-redux\";\nimport { update } from \"../features/textFile/textFileSlice\";\nimport ExpandMoreIcon from \"@material-ui/icons/ExpandMore\";\nimport FileCopyOutlinedIcon from \"@material-ui/icons/FileCopyOutlined\";\nimport React, { useEffect, useState } from \"react\";\n\nconst TextInput = () => {\n  const [text, setText] = useState(\"\");\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(update(text));\n  }, [dispatch, text]);\n\n  const onChange = (e) => {\n    e.preventDefault();\n    setText(e.target.value);\n  };\n\n  const onPaste = (e) => {\n    setText(e.clipboardData.getData(\"Text\"));\n    dispatch(update(text));\n    e.preventDefault();\n  };\n\n  return (\n    <Accordion>\n      <AccordionSummary\n        style={{ borderBottom: \"1px solid #ededed\" }}\n        expandIcon={<ExpandMoreIcon />}\n      >\n        <Typography\n          variant=\"h5\"\n          style={{ display: \"flex\", alignItems: \"center\" }}\n        >\n          <FileCopyOutlinedIcon\n            fontSize=\"large\"\n            style={{ marginRight: \"1rem\" }}\n          />\n          검색 파일 업로드\n        </Typography>\n      </AccordionSummary>\n      <AccordionDetails style={{ display: \"block\", marginTop: \"2rem\" }}>\n        <TextField\n          value={text}\n          onChange={onChange}\n          onPaste={onPaste}\n          fullWidth\n          rows={15}\n          label=\"텍스트\"\n          placeholder=\"검사할 텍스트를 붙여넣으세요.\"\n          multiline\n          variant=\"filled\"\n        />\n      </AccordionDetails>\n    </Accordion>\n  );\n};\n\nexport default TextInput;\n","import { Box, Container, Typography } from \"@material-ui/core\";\nimport \"./app.css\";\nimport OptionSettingBar from \"./components/OptionSettingBar\";\nimport Result from \"./components/Result\";\nimport TextInput from \"./components/TextInput\";\n\nfunction App() {\n  return (\n    <Container maxWidth=\"md\">\n      <Box my={10}>\n        <Typography align=\"center\" variant=\"h3\" component=\"h1\">\n          Corpus Search Engine\n        </Typography>\n      </Box>\n\n      <OptionSettingBar />\n      <Result />\n      <TextInput />\n    </Container>\n  );\n}\n\nexport default App;\n","import { configureStore } from \"@reduxjs/toolkit\";\nimport textFileReducer from \"../src/features/textFile/textFileSlice\";\nimport searchResultReducer from \"../src/features/searchResult/searchResultSlice\";\n\nexport default configureStore({\n  reducer: {\n    textFile: textFileReducer,\n    searchResult: searchResultReducer,\n  },\n});\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport { Provider } from \"react-redux\";\nimport store from \"./store\";\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}