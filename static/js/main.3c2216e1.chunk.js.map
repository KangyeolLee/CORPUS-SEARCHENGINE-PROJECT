{"version":3,"sources":["features/searchResult/searchResultSlice.js","utils/regex.js","utils/functions.js","components/OptionSettingBar.js","components/TableForm.js","components/Result.js","features/textFile/textFileSlice.js","components/TextInput.js","App.js","store.js","index.js"],"names":["searchResultSlice","createSlice","name","initialState","searchWords","aroundWords","reducers","updateSearchWord","state","action","payload","updateAroundWord","actions","REGEX_SENTENCE","filterOriginalText","text","word","range","lowerText","toLowerCase","myWord","trim","filteredSentence","split","filter","String","sentence","includes","REGEX_WORD","RegExp","slicedText","match","reduce","acc","cur","sum","OptionSettingBar","useState","setWord","setRange","useSelector","textFile","value","dispatch","useDispatch","Accordion","defaultExpanded","AccordionSummary","style","borderBottom","expandIcon","Typography","variant","display","alignItems","fontSize","marginRight","AccordionDetails","marginTop","FormControl","margin","Grid","container","spacing","item","TextField","onChange","e","preventDefault","target","label","helperText","Button","onClick","result","alert","size","color","useStyles","makeStyles","table","textAlign","tbcMain","width","fontWeight","backgroundColor","tbcAppearance","TableForm","data","classes","ranges","hashSetForTableData","i","push","tableData","Object","values","frequencyRange","length","keyword","Set","sort","a","b","exceptOneFrequency","shift","makeTableData","appearance","Table","className","TableHead","TableRow","TableCell","map","num","uuid","TableBody","tbcell","strs","entries","count","line","Alert","severity","AlertTitle","Result","sentences","searchResult","wordsArr","setWordsArr","setSum","useEffect","initialWordsArr","initialSum","wordsInPrev","wordsInNext","nospaceWord","join","splitedSentence","replaceAll","indexes","idx","start","end","prevColumns","slice","nextColumns","reverse","filterTextForTableData","onClickMinusBtn","id","currentTarget","nextWordsArr","nextSum","marginBottom","marginLeft","xs","IconButton","inputProps","readOnly","Divider","justifyContent","padding","Box","my","mx","textFileSlice","update","TextInput","setText","onPaste","clipboardData","getData","fullWidth","rows","placeholder","multiline","theme","createMuiTheme","status","danger","orange","App","ThemeProvider","Container","maxWidth","align","component","configureStore","reducer","textFileReducer","searchResultReducer","ReactDOM","render","store","document","getElementById"],"mappings":"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","file":"static/js/main.3c2216e1.chunk.js","sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\n\nexport const searchResultSlice = createSlice({\n  name: \"searchResult\",\n  initialState: {\n    searchWords: \"\",\n    aroundWords: \"\",\n  },\n  reducers: {\n    updateSearchWord: (state, action) => {\n      state.searchWords = action.payload;\n    },\n    updateAroundWord: (state, action) => {\n      state.aroundWords = action.payload;\n    },\n  },\n});\n\nexport const { updateSearchWord, updateAroundWord } = searchResultSlice.actions;\n\nexport default searchResultSlice.reducer;\n","export const REGEX_WORD = /\\S[A-Za-z-ÁÀȦÂÄǞǍĂĀÃÅǺǼǢĆĊĈČĎḌḐḒÉÈĖÊËĚĔĒẼE̊ẸǴĠĜǦĞG̃ĢĤḤáàȧâäǟǎăāãåǻǽǣćċĉčďḍḑḓéèėêëěĕēẽe̊ẹǵġĝǧğg̃ģĥḥÍÌİÎÏǏĬĪĨỊĴĶǨĹĻĽĿḼM̂M̄ʼNŃN̂ṄN̈ŇN̄ÑŅṊÓÒȮȰÔÖȪǑŎŌÕȬŐỌǾƠíìiîïǐĭīĩịĵķǩĺļľŀḽm̂m̄ŉńn̂ṅn̈ňn̄ñņṋóòôȯȱöȫǒŏōõȭőọǿơP̄ŔŘŖŚŜṠŠȘṢŤȚṬṰÚÙÛÜǓŬŪŨŰŮỤẂẀŴẄÝỲŶŸȲỸŹŻŽẒǮp̄ŕřŗśŝṡšşṣťțṭṱúùûüǔŭūũűůụẃẁŵẅýỳŷÿȳỹźżžẓǯßœŒçÇ]*/gi;\n\nexport const REGEX_SENTENCE = /[\\n|.|?|!]/gi;\n\nexport const makeREGEXwithInput = (input) => {\n  return new RegExp(\"[\\\\w]*\" + input + \"[\\\\w]*\", \"gi\");\n};\n","import { makeREGEXwithInput, REGEX_SENTENCE } from \"./regex\";\n\nexport const filterOriginalText = (text, word, range) => {\n  const lowerText = text.toLowerCase();\n  const myWord = word.trim().toLowerCase();\n\n  // 입력된 word 가 포함된 문장 선별\n  const sentences = lowerText.split(REGEX_SENTENCE).filter(String);\n  const filteredSentence = sentences.filter((sentence) =>\n    sentence.includes(myWord)\n  );\n\n  // 입력된 text 파일에서 주어진 word 가 포함된 단어 등장빈도 측정\n  const REGEX_WORD = makeREGEXwithInput(myWord);\n  const slicedText = lowerText.match(REGEX_WORD);\n  const hashText = slicedText?.reduce((acc, cur) => {\n    if (acc[cur]) {\n      acc[cur].sum++;\n    } else acc[cur] = { sum: 1 };\n\n    return acc;\n  }, {});\n\n  const result = {\n    word,\n    text: hashText,\n    range,\n  };\n\n  return [filteredSentence, result];\n};\n\nexport const makeTableData = (range, data) => {\n  const ranges = [];\n  const hashSetForTableData = {};\n\n  for (let i = 1; i <= range; i++) {\n    ranges.push(i);\n    hashSetForTableData[i] = {};\n  }\n\n  const tableData = Object.values(data);\n  const frequencyRange = [];\n  // 단어가 등장한 문장에서 주어진 range 범위 내에 어떤 단어가 몇 번의 빈도로 등장하는지에 대한 정보를 저장\n  for (let i = 0; i < tableData.length; i++) {\n    for (const keyword of tableData[i]) {\n      hashSetForTableData[i + 1][keyword] = hashSetForTableData[i + 1][keyword]\n        ? hashSetForTableData[i + 1][keyword] + 1\n        : 1;\n    }\n    frequencyRange.push(\n      ...[...new Set(Object.values(hashSetForTableData[i + 1]))]\n    );\n  }\n\n  frequencyRange.sort((a, b) => a - b);\n  const exceptOneFrequency = [...new Set(frequencyRange)];\n\n  if (exceptOneFrequency[0] === 1) exceptOneFrequency.shift(); // 1번 등장한 단어는 테이블 출력에서 제외\n\n  return [ranges, exceptOneFrequency, hashSetForTableData];\n};\n\nexport const filterTextForTableData = (\n  word,\n  range,\n  sentences,\n  wordsInPrev,\n  wordsInNext\n) => {\n  // 입력된 word가 포함된 문장별로 세분화\n  const myWord = word.toLowerCase();\n  const nospaceWord = myWord.split(\" \").join(\"\");\n\n  for (const sentence of sentences) {\n    const replacedSentence = sentence.replaceAll(myWord, nospaceWord);\n    const splitedSentence = replacedSentence.split(\" \").filter(String);\n    const indexes = splitedSentence.reduce((acc, cur, idx) => {\n      if (cur.includes(nospaceWord)) acc.push(idx);\n      return acc;\n    }, []);\n\n    // 세분화 된 문장에서 입력된 word의 index를 기준으로 이전/이후 범위 탐색\n    for (const idx of indexes) {\n      const start = idx - range * 1 >= 0 ? idx - range * 1 : 0;\n      const end = idx + range * 1 + 1;\n      const prevColumns = splitedSentence.slice(start, idx);\n      const nextColumns = splitedSentence.slice(idx + 1, end);\n\n      prevColumns.reverse(); // 이전/이후 컬럼의 데이터 탐색 방향 통일\n\n      // 선택 단어 기준 이전에 위치한 단어들의 정보 생성 => [떨어진 칸 수] : { [단어] : 등장횟수 }\n      for (let i = 0; i < prevColumns.length; i++) {\n        if (wordsInPrev[i + 1]) {\n          wordsInPrev[i + 1].push(prevColumns[i]);\n        } else {\n          wordsInPrev[i + 1] = [prevColumns[i]];\n        }\n      }\n\n      // 선택 단어 기준 이후에 위치한 단어들의 정보 생성 => [떨어진 칸 수] : { [단어] : 등장횟수 }\n      for (let i = 0; i < nextColumns.length; i++) {\n        if (wordsInNext[i + 1]) {\n          wordsInNext[i + 1].push(nextColumns[i]);\n        } else {\n          wordsInNext[i + 1] = [nextColumns[i]];\n        }\n      }\n    }\n  }\n};\n","import {\n  Accordion,\n  AccordionDetails,\n  AccordionSummary,\n  Button,\n  FormControl,\n  Grid,\n  TextField,\n  Typography,\n} from \"@material-ui/core\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport {\n  updateSearchWord,\n  updateAroundWord,\n} from \"../features/searchResult/searchResultSlice\";\nimport ExpandMoreIcon from \"@material-ui/icons/ExpandMore\";\nimport FindInPageOutlinedIcon from \"@material-ui/icons/FindInPageOutlined\";\nimport React, { useState } from \"react\";\nimport { filterOriginalText } from \"../utils/functions\";\n\nconst OptionSettingBar = () => {\n  const [word, setWord] = useState(\"\");\n  const [range, setRange] = useState(1);\n  const text = useSelector((state) => state.textFile.value);\n  const dispatch = useDispatch();\n\n  const onChangeWord = (e) => {\n    e.preventDefault();\n    setWord(e.target.value);\n  };\n\n  const onChangeRange = (e) => {\n    e.preventDefault();\n    setRange(e.target.value);\n  };\n\n  const onSubmit = (e) => {\n    e.preventDefault();\n\n    if (!text) {\n      alert(\"검색할 파일 내용을 복붙하세욧!\");\n      return;\n    }\n\n    if (!word) {\n      alert(\"검색할 단어를 입력하세욨!\");\n      return;\n    }\n\n    const [filteredSentence, result] = filterOriginalText(text, word, range);\n\n    dispatch(updateAroundWord(filteredSentence));\n    dispatch(updateSearchWord(result));\n  };\n\n  return (\n    <Accordion defaultExpanded={true}>\n      <AccordionSummary\n        style={{ borderBottom: \"1px solid #ededed\" }}\n        expandIcon={<ExpandMoreIcon />}\n      >\n        <Typography\n          variant=\"h5\"\n          style={{ display: \"flex\", alignItems: \"center\" }}\n        >\n          <FindInPageOutlinedIcon\n            fontSize=\"large\"\n            style={{ marginRight: \"1rem\" }}\n          />\n          검색어 설정\n        </Typography>\n      </AccordionSummary>\n      <AccordionDetails style={{ display: \"block\", marginTop: \"2rem\" }}>\n        <FormControl style={{ margin: \"0 2rem\" }}>\n          <Grid container spacing={3}>\n            <Grid item>\n              <TextField\n                value={word}\n                onChange={onChangeWord}\n                variant=\"outlined\"\n                label=\"검색할 단어\"\n                helperText=\"전치사 + 명사구 등 문장단위 가능\"\n              />\n            </Grid>\n\n            <Grid item>\n              <TextField\n                variant=\"outlined\"\n                label=\"검색 범위\"\n                helperText=\"기본범위 1\"\n                onChange={onChangeRange}\n                value={range}\n              />\n            </Grid>\n\n            <Grid item>\n              <Button\n                onClick={onSubmit}\n                size=\"large\"\n                variant=\"contained\"\n                color=\"primary\"\n              >\n                검색\n              </Button>\n            </Grid>\n          </Grid>\n        </FormControl>\n      </AccordionDetails>\n    </Accordion>\n  );\n};\n\nexport default OptionSettingBar;\n","import {\n  makeStyles,\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableRow,\n} from \"@material-ui/core\";\nimport { Alert, AlertTitle } from \"@material-ui/lab\";\nimport React from \"react\";\nimport { v4 as uuid } from \"uuid\";\nimport { makeTableData } from \"../utils/functions\";\n\nconst useStyles = makeStyles({\n  table: {\n    \"& td, & th\": {\n      textAlign: \"center\",\n    },\n  },\n  tbcMain: {\n    width: \"70px\",\n    fontWeight: \"bold\",\n    textAlign: \"center\",\n    backgroundColor: \"#ededed\",\n  },\n  tbcAppearance: {\n    fontWeight: \"bold\",\n    fontSize: \"1.5rem\",\n    textAlign: \"center\",\n    backgroundColor: \"#ededed\",\n  },\n});\n\nconst TableForm = ({ range, data }) => {\n  const classes = useStyles();\n  const [ranges, appearance, hashSetForTableData] = makeTableData(range, data);\n\n  return (\n    <>\n      <Table className={classes.table}>\n        <TableHead>\n          <TableRow>\n            <TableCell className={classes.tbcMain}>등장 빈도</TableCell>\n            {ranges.length > 0 &&\n              ranges.map((num) => <TableCell key={uuid()}>{num}칸</TableCell>)}\n          </TableRow>\n        </TableHead>\n        <TableBody>\n          {appearance.length > 0 &&\n            appearance.map((num) => (\n              <TableRow key={uuid()}>\n                <TableCell className={classes.tbcAppearance}>{num}</TableCell>\n                {Object.values(hashSetForTableData).length > 0 &&\n                  Object.values(hashSetForTableData).map((tbcell) => {\n                    const tbcInfo = Object.entries(tbcell);\n                    let strs = \"\";\n                    for (const [keyword, count] of tbcInfo) {\n                      if (num === count) {\n                        strs += keyword + \"\\n\";\n                      }\n                    }\n                    return (\n                      <TableCell key={uuid()}>\n                        {strs.split(\"\\n\").map((line) => (\n                          <span key={uuid()}>\n                            {line}\n                            <br />\n                          </span>\n                        ))}\n                      </TableCell>\n                    );\n                  })}\n              </TableRow>\n            ))}\n        </TableBody>\n      </Table>\n      {!appearance.length && (\n        <Alert style={{ margin: \"2rem 0\" }} severity=\"warning\">\n          <AlertTitle>\n            <strong>아이고난!! 🤣</strong>\n          </AlertTitle>\n          검색 결과가 없습니다!\n        </Alert>\n      )}\n    </>\n  );\n};\n\nexport default TableForm;\n","import {\n  Accordion,\n  AccordionDetails,\n  AccordionSummary,\n  Box,\n  Divider,\n  Grid,\n  IconButton,\n  TextField,\n  Typography,\n} from \"@material-ui/core\";\nimport { Alert, AlertTitle } from \"@material-ui/lab\";\nimport { useSelector } from \"react-redux\";\nimport ExpandMoreIcon from \"@material-ui/icons/ExpandMore\";\nimport DescriptionOutlinedIcon from \"@material-ui/icons/DescriptionOutlined\";\nimport RemoveCircleOutlineIcon from \"@material-ui/icons/RemoveCircleOutline\";\nimport React, { useEffect, useState } from \"react\";\nimport TableForm from \"./TableForm\";\nimport { filterTextForTableData } from \"../utils/functions\";\n\nconst Result = () => {\n  const sentences = useSelector((state) => state.searchResult.aroundWords);\n  const { word, text, range } = useSelector(\n    (state) => state.searchResult.searchWords\n  );\n  const [wordsArr, setWordsArr] = useState(\"\");\n  const [sum, setSum] = useState(0);\n\n  useEffect(() => {\n    const initialWordsArr = text ? Object.entries(text) : \"\";\n    const initialSum = text\n      ? Object.values(text).reduce((a, b) => a + b.sum, 0)\n      : 0;\n    setWordsArr(initialWordsArr);\n    setSum(initialSum);\n  }, [text]);\n\n  const wordsInPrev = {};\n  const wordsInNext = {};\n  if (word) {\n    filterTextForTableData(word, range, sentences, wordsInPrev, wordsInNext);\n  }\n\n  const onClickMinusBtn = (e) => {\n    const id = e.currentTarget.id;\n    const nextWordsArr = wordsArr.filter((word) => word[0] !== id);\n    const nextSum = nextWordsArr.reduce((a, b) => a + b[1].sum, 0);\n    setWordsArr(nextWordsArr);\n    setSum(nextSum);\n  };\n\n  return (\n    <Accordion>\n      <AccordionSummary\n        style={{ borderBottom: \"1px solid #ededed\" }}\n        expandIcon={<ExpandMoreIcon />}\n      >\n        <Typography\n          variant=\"h5\"\n          style={{ display: \"flex\", alignItems: \"center\" }}\n        >\n          <DescriptionOutlinedIcon\n            fontSize=\"large\"\n            style={{ marginRight: \"1rem\" }}\n          />\n          검색 결과\n        </Typography>\n      </AccordionSummary>\n\n      <AccordionDetails style={{ display: \"block\", marginTop: \"2rem\" }}>\n        <Typography\n          style={{\n            marginBottom: \"3rem\",\n            marginLeft: \"2rem\",\n            fontWeight: \"bold\",\n          }}\n          variant=\"h6\"\n        >\n          검색 목록\n        </Typography>\n        {wordsArr.length ? (\n          <Grid\n            container\n            spacing={5}\n            key={word}\n            style={{ alignItems: \"center\" }}\n          >\n            {wordsArr.map((word) => (\n              <Grid item xs={6}>\n                <Grid container spacing={2}>\n                  <IconButton\n                    onClick={onClickMinusBtn}\n                    id={word[0]}\n                    style={{ marginLeft: \"2rem\" }}\n                  >\n                    <RemoveCircleOutlineIcon\n                      color=\"secondary\"\n                      fontSize=\"large\"\n                    />\n                  </IconButton>\n\n                  <Grid item style={{ width: \"40%\" }}>\n                    <TextField\n                      value={word[0]}\n                      label=\"검색결과\"\n                      variant=\"outlined\"\n                      inputProps={{ readOnly: true }}\n                    />\n                  </Grid>\n                  <Grid item style={{ width: \"40%\" }}>\n                    <TextField\n                      value={word[1].sum}\n                      label=\"등장빈도\"\n                      variant=\"outlined\"\n                      inputProps={{ readOnly: true }}\n                    />\n                  </Grid>\n                </Grid>\n              </Grid>\n            ))}\n          </Grid>\n        ) : (\n          <Alert style={{ margin: \"0 2rem\" }} severity=\"warning\">\n            <AlertTitle>\n              <strong>아이고난!! 🤣</strong>\n            </AlertTitle>\n            검색 결과가 없습니다!\n          </Alert>\n        )}\n\n        <Divider style={{ margin: \"2rem\" }} />\n\n        <Grid\n          container\n          style={{ justifyContent: \"flex-end\", padding: \"0 2rem\" }}\n        >\n          <Grid item>\n            <TextField\n              value={sum}\n              label=\"총합\"\n              variant=\"outlined\"\n              inputProps={{ readOnly: true }}\n            />\n          </Grid>\n        </Grid>\n\n        <Typography\n          style={{ marginTop: \"3rem\", marginLeft: \"2rem\", fontWeight: \"bold\" }}\n          variant=\"h6\"\n        >\n          검색어 이전 등장 단어 목록\n        </Typography>\n\n        <Box my={1} mx=\"2rem\">\n          <TableForm range={range} data={wordsInPrev} />\n        </Box>\n\n        <Typography\n          style={{\n            marginTop: \"2.5rem\",\n            marginLeft: \"2rem\",\n            fontWeight: \"bold\",\n          }}\n          variant=\"h6\"\n        >\n          검색어 이후 등장 단어 목록\n        </Typography>\n\n        <Box my={1} mx=\"2rem\">\n          <TableForm range={range} data={wordsInNext} />\n        </Box>\n      </AccordionDetails>\n    </Accordion>\n  );\n};\n\nexport default Result;\n","import { createSlice } from \"@reduxjs/toolkit\";\n\nexport const textFileSlice = createSlice({\n  name: \"textFile\",\n  initialState: {\n    value: \"\",\n  },\n  reducers: {\n    update: (state, action) => {\n      state.value = action.payload;\n    },\n  },\n});\n\nexport const { update } = textFileSlice.actions;\n\nexport default textFileSlice.reducer;\n","import {\n  Accordion,\n  AccordionDetails,\n  AccordionSummary,\n  TextField,\n  Typography,\n} from \"@material-ui/core\";\nimport { useDispatch } from \"react-redux\";\nimport { update } from \"../features/textFile/textFileSlice\";\nimport ExpandMoreIcon from \"@material-ui/icons/ExpandMore\";\nimport FileCopyOutlinedIcon from \"@material-ui/icons/FileCopyOutlined\";\nimport React, { useEffect, useState } from \"react\";\n\nconst TextInput = () => {\n  const [text, setText] = useState(\"\");\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(update(text));\n  }, [dispatch, text]);\n\n  const onChange = (e) => {\n    e.preventDefault();\n    setText(e.target.value);\n  };\n\n  const onPaste = (e) => {\n    setText(e.clipboardData.getData(\"Text\"));\n    dispatch(update(text));\n    e.preventDefault();\n  };\n\n  return (\n    <Accordion>\n      <AccordionSummary\n        style={{ borderBottom: \"1px solid #ededed\" }}\n        expandIcon={<ExpandMoreIcon />}\n      >\n        <Typography\n          variant=\"h5\"\n          style={{ display: \"flex\", alignItems: \"center\" }}\n        >\n          <FileCopyOutlinedIcon\n            fontSize=\"large\"\n            style={{ marginRight: \"1rem\" }}\n          />\n          검색 파일 업로드\n        </Typography>\n      </AccordionSummary>\n      <AccordionDetails style={{ display: \"block\", marginTop: \"2rem\" }}>\n        <TextField\n          value={text}\n          onChange={onChange}\n          onPaste={onPaste}\n          fullWidth\n          rows={15}\n          label=\"텍스트\"\n          placeholder=\"검사할 텍스트를 붙여넣으세요.\"\n          multiline\n          variant=\"filled\"\n        />\n      </AccordionDetails>\n    </Accordion>\n  );\n};\n\nexport default TextInput;\n","import { Box, Container, Typography } from \"@material-ui/core\";\nimport { createMuiTheme, ThemeProvider } from \"@material-ui/core/styles\";\nimport { orange } from \"@material-ui/core/colors\";\nimport \"./app.css\";\nimport OptionSettingBar from \"./components/OptionSettingBar\";\nimport Result from \"./components/Result\";\nimport TextInput from \"./components/TextInput\";\n\nconst theme = createMuiTheme({\n  status: {\n    danger: orange[500],\n  },\n});\n\nfunction App() {\n  return (\n    <ThemeProvider theme={theme}>\n      <Container maxWidth=\"lg\">\n        <Box my={10}>\n          <Typography align=\"center\" variant=\"h3\" component=\"h1\">\n            Corpus Search Engine\n          </Typography>\n          <Typography align=\"center\" variant=\"h5\" component=\"h1\">\n            optimized in German (DEUTSCH)\n          </Typography>\n        </Box>\n\n        <OptionSettingBar />\n        <Result />\n        <TextInput />\n      </Container>\n    </ThemeProvider>\n  );\n}\n\nexport default App;\n","import { configureStore } from \"@reduxjs/toolkit\";\nimport textFileReducer from \"../src/features/textFile/textFileSlice\";\nimport searchResultReducer from \"../src/features/searchResult/searchResultSlice\";\n\nexport default configureStore({\n  reducer: {\n    textFile: textFileReducer,\n    searchResult: searchResultReducer,\n  },\n});\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport { Provider } from \"react-redux\";\nimport store from \"./store\";\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}